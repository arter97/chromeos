/dts-v1/;

#include "tegra124.dtsi"
#include "tegra124-nyan.dtsi"
#include "tegra124-nyan-blaze-emc.dtsi"
#include "marvell_txpwrlimit.dtsi"

/ {
	model = "Google Nyan Blaze Rev 0+";

	compatible = "google,nyan-blaze-rev10", "google,nyan-blaze-rev9",
			"google,nyan-blaze-rev8", "google,nyan-blaze-rev7",
			"google,nyan-blaze-rev6", "google,nyan-blaze-rev5",
			"google,nyan-blaze-rev4", "google,nyan-blaze-rev3",
			"google,nyan-blaze-rev2", "google,nyan-blaze-rev1",
			"google,nyan-blaze-rev0", "google,nyan",
			"nvidia,tegra124";

	host1x@50000000 {
		dc@54200000 {
			depth = <18>;
			width = <256>;
			height = <144>;
			power-off-time = <500>;
			pwm-to-bl-on = <80>;
			bl-off-to-pwm = <10>;
			drive-current = <0x19191919>;
			preemphasis = <0x09090909>;
		};

		sor@54540000 {
			status = "okay";

			nvidia,dpaux = <&dpaux>;
			nvidia,panel = <&panel>;
		};

		hdmi@54280000 {
			nvidia,ddc-i2c-bus = <&hdmi_ddc>;
		};

		panel: panel {
			compatible = "samsung,ltn140at29-301", "simple-panel";
		};

		dpaux: dpaux@545c0000 {
			status = "okay";
		};
	};

	hdmi_ddc: i2c@7000c700 {
		status = "okay";
	};

	pinmux {
		pinmux@0 {
			hp_det_l {
				nvidia,pins = "pi7";
				nvidia,function = "rsvd1";
				nvidia,pull = <TEGRA_PIN_PULL_NONE>;
				nvidia,tristate = <TEGRA_PIN_DISABLE>;
				nvidia,enable-input = <TEGRA_PIN_ENABLE>;
			};
			soc_warm_reset_l {
				nvidia,pins = "pi5";
				nvidia,function = "gmi";
				nvidia,pull = <TEGRA_PIN_PULL_UP>;
				nvidia,tristate = <TEGRA_PIN_DISABLE>;
				nvidia,enable-input = <TEGRA_PIN_DISABLE>;
			};
			modem_en {
				nvidia,pins = "kb_row12_ps4";
				nvidia,function = "rsvd2";
				nvidia,pull = <TEGRA_PIN_PULL_UP>;
				nvidia,tristate = <TEGRA_PIN_DISABLE>;
				nvidia,enable-input = <TEGRA_PIN_DISABLE>;
			};
			modem_reset {
				nvidia,pins = "kb_row11_ps3";
				nvidia,function = "rsvd2";
				nvidia,pull = <TEGRA_PIN_PULL_UP>;
				nvidia,tristate = <TEGRA_PIN_DISABLE>;
				nvidia,enable-input = <TEGRA_PIN_DISABLE>;
			};
		};
	};

	i2c@7000c400 {
		clock-frequency = <400000>;

		trackpad@15 {
			compatible = "elan,i2c_touchpad";
			reg = <0x15>;
			interrupt-parent = <&gpio>;
			interrupts = <TEGRA_GPIO(W, 3) IRQ_TYPE_EDGE_FALLING>;
			nvidia,pmc-wakeup = <&pmc 1 11 2>;
			wakeup-source;
		};
		touchscreen {
			compatible = "elan,i2c_touchscreen";
			reg = <0x10>;
			interrupt-parent = <&gpio>;
			interrupts = <TEGRA_GPIO(K, 2) IRQ_TYPE_EDGE_FALLING>;
		};
	};

	i2c@7000d000 {
		pmic@40 {
			ams,sd6-adc-ch = <AS3722_TEMP1_SD6>;
			pinctrl@0 {
				gpio6 {
					pins = "gpio6";
					function = "clk32k-out";
					bias-pull-down;
				};
			};
		};
	};

	phy@7009f000 {
		nvidia,xusb-hs-xcvr-setup-offset = <0x020004>;
	};

	sdhci@700b0000 {
		trim-delay = <0x2>;
		calib-3v3-offsets = <0x7676>;
		calib-1v8-offsets = <0x7676>;
		calib-1v8-offsets-uhs-modes = <0x3f>;
		max-frequency = <204000000>;
	};

	sdhci@700b0400 {
		cd-inverted;
		trim-delay = <0x3>;
		calib-3v3-offsets = <0x7676>;
		calib-1v8-offsets = <0x7676>;
		calib-1v8-offsets-uhs-modes = <0x3f>;
		max-frequency = <204000000>;
		uhs-mask = <0x10>;
	};

	sdhci@700b0600 {
		trim-delay = <0x4>;
		ddr-trim-delay = <0x4>;
		calib-3v3-offsets = <0x0202>;
		calib-1v8-offsets = <0x0202>;
		calib-1v8-offsets-uhs-modes = <0x3f>;
		max-frequency = <200000000>;
	};

	pmc {
		nvidia,reset-gpio = <&gpio TEGRA_GPIO(I, 5) GPIO_ACTIVE_LOW>;
	};

	sound {
		nvidia,hp-det-gpios = <&gpio TEGRA_GPIO(I, 7) GPIO_ACTIVE_HIGH>;
		nvidia,mic-det-gpios = <&gpio TEGRA_GPIO(R, 7)
							GPIO_ACTIVE_HIGH>;
	};

	skin_temp: therm-est {
		compatible = "nvidia,tegra124-therm-est";
		toffset = <3726>;
		tc1 = <10>;
		tc2 = <1>;
		polling-period = <1100>;

		#thermal-sensor-cells = <0>;

		sub-devs {
			dev@0 {
				dev = <&diode_thermal_sensor>;
				coeffs = "-16 -10 -7 -2 2 3 5 5 5 5 3 4 6 4 3 0 0 3 6 10";
			};

			dev@1 {
				dev = <&board_thermal_sensor>;
				coeffs = "-44 -16 -8 -3 -2 -8 -5 0 5 -1 -5 -9 -4 0 5 5 10 13 31 81";
			};
		};
	};

	thermal-zones {
		skin-therm {
			polling-delay-passive = <15000>; /* milliseconds */
			polling-delay = <0>; /* milliseconds */

			thermal-sensors = <&skin_temp>;

			trips {
				balance_trip0: balance_trip {
					temperature = <45000>; /* millicelsius */
					hysteresis = <0>; /* millicelsius */
					type = "passive";
				};
			};

			cooling-maps {
				map0 {
					trip = <&balance_trip0>;
					cooling-device = <&throttle0 THERMAL_NO_LIMIT THERMAL_NO_LIMIT>;
				};
			};
		};
		as3722-cpu-therm {
			polling-delay-passive = <25>; /* milliseconds */
			polling-delay = <0>; /* milliseconds */
			thermal-sensors = <&ams3722 AS3722_SD0_SENSOR>;

			trips {
				balance_trip1: balance_trip {
					temperature = <110000>; /* millicelsius */
					hysteresis = <0>; /* millicelsius */
					type = "passive";
				};
			};

			cooling-maps {
				map0 {
					trip = <&balance_trip1>;
					cooling-device = <&throttle0 THERMAL_NO_LIMIT THERMAL_NO_LIMIT>;
				};
			};
		};
		as3722-core-therm {
			polling-delay-passive = <25>; /* milliseconds */
			polling-delay = <0>; /* milliseconds */
			thermal-sensors = <&ams3722 AS3722_SD1_SENSOR>;

			trips {
				balance_trip2: balance_trip {
					temperature = <110000>; /* millicelsius */
					hysteresis = <0>; /* millicelsius */
					type = "passive";
				};
			};

			cooling-maps {
				map0 {
					trip = <&balance_trip2>;
					cooling-device = <&throttle0 THERMAL_NO_LIMIT THERMAL_NO_LIMIT>;
				};
			};
		};
		as3722-gpu-therm {
			polling-delay-passive = <25>; /* milliseconds */
			polling-delay = <0>; /* milliseconds */
			thermal-sensors = <&ams3722 AS3722_SD6_SENSOR>;

			trips {
				balance_trip3: balance_trip {
					temperature = <110000>; /* millicelsius */
					hysteresis = <0>; /* millicelsius */
					type = "passive";
				};
			};

			cooling-maps {
				map0 {
					trip = <&balance_trip3>;
					cooling-device = <&throttle0 THERMAL_NO_LIMIT THERMAL_NO_LIMIT>;
				};
			};
		};
	};

	spi@7000d400 {
		ec: cros-ec@0 {
			keyboard-controller {
				compatible = "google,cros-ec-keyb";
				keypad,num-rows = <8>;
				keypad,num-columns = <13>;
				google,needs-ghost-filter;
				linux,keymap =
					<MATRIX_KEY(0x00, 0x01, KEY_LEFTMETA)
					 MATRIX_KEY(0x00, 0x02, KEY_F1)
					 MATRIX_KEY(0x00, 0x03, KEY_B)
					 MATRIX_KEY(0x00, 0x04, KEY_F10)
					 MATRIX_KEY(0x00, 0x05, KEY_RO)
					 MATRIX_KEY(0x00, 0x06, KEY_N)
					 MATRIX_KEY(0x00, 0x08, KEY_EQUAL)
					 MATRIX_KEY(0x00, 0x0a, KEY_RIGHTALT)

					 MATRIX_KEY(0x01, 0x01, KEY_ESC)
					 MATRIX_KEY(0x01, 0x02, KEY_F4)
					 MATRIX_KEY(0x01, 0x03, KEY_G)
					 MATRIX_KEY(0x01, 0x04, KEY_F7)
					 MATRIX_KEY(0x01, 0x06, KEY_H)
					 MATRIX_KEY(0x01, 0x08, KEY_APOSTROPHE)
					 MATRIX_KEY(0x01, 0x09, KEY_F9)
					 MATRIX_KEY(0x01, 0x0b, KEY_BACKSPACE)
					 MATRIX_KEY(0x01, 0x0C, KEY_HENKAN)

					 MATRIX_KEY(0x02, 0x00, KEY_LEFTCTRL)
					 MATRIX_KEY(0x02, 0x01, KEY_TAB)
					 MATRIX_KEY(0x02, 0x02, KEY_F3)
					 MATRIX_KEY(0x02, 0x03, KEY_T)
					 MATRIX_KEY(0x02, 0x04, KEY_F6)
					 MATRIX_KEY(0x02, 0x05, KEY_RIGHTBRACE)
					 MATRIX_KEY(0x02, 0x06, KEY_Y)
					 MATRIX_KEY(0x02, 0x07, KEY_102ND)
					 MATRIX_KEY(0x02, 0x08, KEY_LEFTBRACE)
					 MATRIX_KEY(0x02, 0x09, KEY_F8)
					 MATRIX_KEY(0x02, 0x0A, KEY_YEN)

					 MATRIX_KEY(0x03, 0x01, KEY_GRAVE)
					 MATRIX_KEY(0x03, 0x02, KEY_F2)
					 MATRIX_KEY(0x03, 0x03, KEY_5)
					 MATRIX_KEY(0x03, 0x04, KEY_F5)
					 MATRIX_KEY(0x03, 0x06, KEY_6)
					 MATRIX_KEY(0x03, 0x08, KEY_MINUS)
					 MATRIX_KEY(0x03, 0x0b, KEY_BACKSLASH)
					 MATRIX_KEY(0x03, 0x0C, KEY_MUHENKAN)

					 MATRIX_KEY(0x04, 0x00, KEY_RIGHTCTRL)
					 MATRIX_KEY(0x04, 0x01, KEY_A)
					 MATRIX_KEY(0x04, 0x02, KEY_D)
					 MATRIX_KEY(0x04, 0x03, KEY_F)
					 MATRIX_KEY(0x04, 0x04, KEY_S)
					 MATRIX_KEY(0x04, 0x05, KEY_K)
					 MATRIX_KEY(0x04, 0x06, KEY_J)
					 MATRIX_KEY(0x04, 0x08, KEY_SEMICOLON)
					 MATRIX_KEY(0x04, 0x09, KEY_L)
					 MATRIX_KEY(0x04, 0x0a, KEY_BACKSLASH)
					 MATRIX_KEY(0x04, 0x0b, KEY_ENTER)

					 MATRIX_KEY(0x05, 0x01, KEY_Z)
					 MATRIX_KEY(0x05, 0x02, KEY_C)
					 MATRIX_KEY(0x05, 0x03, KEY_V)
					 MATRIX_KEY(0x05, 0x04, KEY_X)
					 MATRIX_KEY(0x05, 0x05, KEY_COMMA)
					 MATRIX_KEY(0x05, 0x06, KEY_M)
					 MATRIX_KEY(0x05, 0x07, KEY_LEFTSHIFT)
					 MATRIX_KEY(0x05, 0x08, KEY_SLASH)
					 MATRIX_KEY(0x05, 0x09, KEY_DOT)
					 MATRIX_KEY(0x05, 0x0b, KEY_SPACE)

					 MATRIX_KEY(0x06, 0x01, KEY_1)
					 MATRIX_KEY(0x06, 0x02, KEY_3)
					 MATRIX_KEY(0x06, 0x03, KEY_4)
					 MATRIX_KEY(0x06, 0x04, KEY_2)
					 MATRIX_KEY(0x06, 0x05, KEY_8)
					 MATRIX_KEY(0x06, 0x06, KEY_7)
					 MATRIX_KEY(0x06, 0x08, KEY_0)
					 MATRIX_KEY(0x06, 0x09, KEY_9)
					 MATRIX_KEY(0x06, 0x0a, KEY_LEFTALT)
					 MATRIX_KEY(0x06, 0x0b, KEY_DOWN)
					 MATRIX_KEY(0x06, 0x0c, KEY_RIGHT)

					 MATRIX_KEY(0x07, 0x01, KEY_Q)
					 MATRIX_KEY(0x07, 0x02, KEY_E)
					 MATRIX_KEY(0x07, 0x03, KEY_R)
					 MATRIX_KEY(0x07, 0x04, KEY_W)
					 MATRIX_KEY(0x07, 0x05, KEY_I)
					 MATRIX_KEY(0x07, 0x06, KEY_U)
					 MATRIX_KEY(0x07, 0x07, KEY_RIGHTSHIFT)
					 MATRIX_KEY(0x07, 0x08, KEY_P)
					 MATRIX_KEY(0x07, 0x09, KEY_O)
					 MATRIX_KEY(0x07, 0x0b, KEY_UP)
					 MATRIX_KEY(0x07, 0x0c, KEY_LEFT)>;
			};
		};
	};
};
